name: Check and Fix Broken Links

on:
  push:
    branches:
      - main
  schedule:
    - cron: '0 0 * * 0'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-link-fix-branch
  cancel-in-progress: true

jobs:
  check-links:
    name: Check and Fix Broken Links
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT_FOR_ACTIONS || secrets.GITHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          set -eux
          npm ci

      - name: Run link checker script
        id: link-check
        env:
          GOOGLE_GEMINI_API: ${{ secrets.GOOGLE_GEMINI_API }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
          QWEN_API: ${{ secrets.QWEN_API }}
        run: |
          set -eux
          node scripts/check-links.js

      - name: Upload link-check logs (artifacts)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: link-check-logs
          path: |
            scripts/link-check-stats.json
          if-no-files-found: ignore

      - name: Generate summary for GitHub Actions
        if: always()
        run: |
          set -eux
          BROKEN_LINKS_COUNT=$(jq '.brokenLinks' scripts/link-check-stats.json 2>/dev/null || echo 'N/A')
          FIXED_LINKS_COUNT=$(jq '.fixedLinks' scripts/link-check-stats.json 2>/dev/null || echo 'N/A')

          echo "## Link Checker Report" >> $GITHUB_STEP_SUMMARY
          echo "- Broken links encontrados: $BROKEN_LINKS_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "- Broken links corrigidos: $FIXED_LINKS_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Detalhes completos (se disponíveis) no artifact 'link-check-logs'." >> $GITHUB_STEP_SUMMARY

      - name: Commit and push changes to dedicated branch
        if: success()
        run: |
          set -eux

          git config --global user.name 'GitHub Actions Bot'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

          BRANCH_NAME="chore/auto-link-fixes"
          git checkout -B "$BRANCH_NAME"

          git add src/data/externalResources-new.ts || echo "Arquivo src/data/externalResources-new.ts não modificado ou não existe."
          git add scripts/link-check-stats.json || echo "Arquivo scripts/link-check-stats.json não modificado ou não existe."

          if ! git diff --quiet --cached; then
            echo "Mudanças detectadas. Realizando commit e push..."
            git commit -m "fix(links): Auto-fix broken links" \
                       -m "Automated link fixing using multi-provider API cascade." \
                       -m "[skip ci]"

            git push --force --set-upstream origin "$BRANCH_NAME"
            echo "::set-output name=changes_pushed::true"
          else
            echo "Nenhuma mudança detectada para commit."
            echo "::set-output name=changes_pushed::false"
          fi
        id: commit_push

      - name: Create or Update Pull Request
        if: success() && steps.commit_push.outputs.changes_pushed == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT_FOR_ACTIONS || secrets.GITHUB_TOKEN }}
          script: |
            const baseBranchName = 'main';
            const headBranchName = 'chore/auto-link-fixes';
            const prTitle = 'fix(links): Automatic Broken Link Fixes';
            const prBody = `
            ## Correção Automática de Links Quebrados

            Este Pull Request foi gerado automaticamente pelo workflow "Check and Fix Broken Links".

            **Alterações:**
            - Links quebrados foram verificados e potencialmente corrigidos usando APIs (Gemini, OpenAI, DeepSeek, Qwen).
            - As alterações propostas estão no arquivo \`src/data/externalResources-new.ts\`.
            - Estatísticas da verificação (se disponíveis) estão no artefato "link-check-logs".

            **Ação Necessária:**
            Por favor, revise cuidadosamente as alterações antes de fazer o merge.

            *Gerado por GitHub Actions.*
            `;
            try {
              const { data: existingPulls } = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                head: `${context.repo.owner}:${headBranchName}`,
                base: baseBranchName,
              });

              if (existingPulls.length > 0) {
                const pull_number = existingPulls[0].number;
                await github.rest.pulls.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number,
                  title: prTitle,
                  body: prBody,
                });
                core.notice(`Pull Request existente #${pull_number} atualizado com sucesso.`);

              } else {
                const { data: newPull } = await github.rest.pulls.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  head: headBranchName,
                  base: baseBranchName,
                  title: prTitle,
                  body: prBody,
                });
                core.notice(`Novo Pull Request #${newPull.number} criado com sucesso.`);
              }
            } catch (error) {
              core.setFailed(`Falha ao criar ou atualizar o Pull Request: ${error.message}`);
            }
