name: Check and Fix Broken Links

on:
  push:
    branches:
      - main
  schedule:
    # Executa semanalmente às 2:30 da manhã de domingo (horário que tem menos chance de rate limits)
    - cron: '30 2 * * 0'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-link-fix-branch
  cancel-in-progress: true

jobs:
  check-links:
    name: Check and Fix Broken Links
    runs-on: ubuntu-latest
    timeout-minutes: 120  # Aumentado para permitir retry em caso de rate limits

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT_FOR_ACTIONS || secrets.GITHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          set -eux
          npm ci

      # Etapa específica para instalar axios (garantir que ele esteja disponível)
      - name: Ensure axios is installed
        run: |
          set -eux
          npm install axios p-limit @babel/parser @babel/traverse

      # Execute com retry automático em caso de falha
      - name: Run link checker script with retries
        id: link-check
        env:
          GOOGLE_GEMINI_API: ${{ secrets.GOOGLE_GEMINI_API }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
          MISTRAL_API_KEY: ${{ secrets.MISTRAL_API_KEY }}
        run: |
          set -eux
          
          # Função para executar com retry
          function run_with_retry {
            max_attempts=3
            attempt=1
            
            while [ $attempt -le $max_attempts ]; do
              echo "Tentativa $attempt de $max_attempts"
              
              if node scripts/check-links.js; then
                echo "Script executado com sucesso!"
                return 0
              else
                echo "Falha na tentativa $attempt. Código de saída: $?"
                
                if [ $attempt -lt $max_attempts ]; then
                  wait_time=$((60 * attempt))  # Aumenta o tempo de espera gradualmente
                  echo "Aguardando $wait_time segundos antes da próxima tentativa..."
                  sleep $wait_time
                fi
                
                attempt=$((attempt + 1))
              fi
            done
            
            echo "Todas as tentativas falharam!"
            return 1
          }
          
          # Executa o script com retry
          run_with_retry
          
      - name: Upload link-check logs (artifacts)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: link-check-logs
          path: |
            scripts/link-check-stats.json
          if-no-files-found: ignore

      - name: Generate summary for GitHub Actions
        if: always()
        run: |
          set -eux
          if [ -f "scripts/link-check-stats.json" ]; then
            BROKEN_LINKS_COUNT=$(jq '.brokenLinks' scripts/link-check-stats.json 2>/dev/null || echo 'N/A')
            FIXED_LINKS_COUNT=$(jq '.fixedLinks' scripts/link-check-stats.json 2>/dev/null || echo 'N/A')
            TOTAL_LINKS_COUNT=$(jq '.totalLinks' scripts/link-check-stats.json 2>/dev/null || echo 'N/A')
            
            echo "## Link Checker Report" >> $GITHUB_STEP_SUMMARY
            echo "- Total de links verificados: $TOTAL_LINKS_COUNT" >> $GITHUB_STEP_SUMMARY
            echo "- Links quebrados encontrados: $BROKEN_LINKS_COUNT" >> $GITHUB_STEP_SUMMARY
            echo "- Links quebrados corrigidos: $FIXED_LINKS_COUNT" >> $GITHUB_STEP_SUMMARY
            
            # Adiciona detalhes dos links corrigidos
            if [ "$FIXED_LINKS_COUNT" != "0" ] && [ "$FIXED_LINKS_COUNT" != "N/A" ]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### Links Corrigidos" >> $GITHUB_STEP_SUMMARY
              jq -r '.brokenLinksData[] | select(.suggestion != null) | "- **" + .title + "**<br>  ❌ " + .url + "<br>  ✅ " + .suggestion + " (via " + .suggestionProvider + ")"' scripts/link-check-stats.json >> $GITHUB_STEP_SUMMARY
            fi
            
            # Adiciona detalhes dos links não corrigidos
            UNFIXED_COUNT=$(jq '.brokenLinks - .fixedLinks' scripts/link-check-stats.json 2>/dev/null || echo 'N/A')
            if [ "$UNFIXED_COUNT" != "0" ] && [ "$UNFIXED_COUNT" != "N/A" ]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### Links Quebrados Não Corrigidos" >> $GITHUB_STEP_SUMMARY
              jq -r '.brokenLinksData[] | select(.suggestion == null) | "- **" + .title + "**<br>  ❌ " + .url' scripts/link-check-stats.json >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "## Link Checker Report" >> $GITHUB_STEP_SUMMARY
            echo "❌ Não foi possível gerar o relatório. Verifique os logs para mais detalhes." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Commit and push changes to dedicated branch
        if: success()
        run: |
          set -eux

          git config --global user.name 'GitHub Actions Bot'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

          BRANCH_NAME="chore/auto-link-fixes"
          git checkout -B "$BRANCH_NAME"

          # Tenta adicionar os arquivos (usando || true para evitar falha se não houver mudanças)
          git add src/data/externalResources-new.ts || echo "Arquivo não modificado ou não existe."
          git add scripts/link-check-stats.json || echo "Arquivo não modificado ou não existe."

          # Verifica se há mudanças para commit
          if ! git diff --quiet --cached; then
            echo "Mudanças detectadas. Realizando commit e push..."
            git commit -m "fix(links): Auto-fix broken links" \
                       -m "Automated link fixing using pattern matching and multi-provider AI." \
                       -m "[skip ci]"

            git push --force --set-upstream origin "$BRANCH_NAME"
            echo "changes_pushed=true" >> $GITHUB_OUTPUT
          else
            echo "Nenhuma mudança detectada para commit."
            echo "changes_pushed=false" >> $GITHUB_OUTPUT
          fi
        id: commit_push

      - name: Create or Update Pull Request
        if: success() && steps.commit_push.outputs.changes_pushed == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT_FOR_ACTIONS || secrets.GITHUB_TOKEN }}
          script: |
            const baseBranchName = 'main';
            const headBranchName = 'chore/auto-link-fixes';
            const prTitle = 'fix(links): Automatic Broken Link Fixes';
            
            // Obtém os dados do relatório para incluir no PR
            let reportData = {};
            const fs = require('fs');
            try {
              if (fs.existsSync('scripts/link-check-stats.json')) {
                reportData = JSON.parse(fs.readFileSync('scripts/link-check-stats.json', 'utf8'));
              }
            } catch (error) {
              console.error("Erro ao ler arquivo de relatório:", error);
            }
            
            // Constrói o corpo do PR com detalhes dos links corrigidos
            let prBody = `
            ## Correção Automática de Links Quebrados

            Este Pull Request foi gerado automaticamente pelo workflow "Check and Fix Broken Links".

            **Resumo:**
            - Links verificados: ${reportData.totalLinks || 'N/A'}
            - Links quebrados encontrados: ${reportData.brokenLinks || 'N/A'}
            - Links corrigidos: ${reportData.fixedLinks || 'N/A'}
            `;
            
            // Adiciona detalhes dos links corrigidos, se houver
            if (reportData.brokenLinksData && reportData.brokenLinksData.length > 0) {
              const fixedLinks = reportData.brokenLinksData.filter(link => link.suggestion);
              if (fixedLinks.length > 0) {
                prBody += `\n\n### Links Corrigidos:\n`;
                fixedLinks.forEach(link => {
                  prBody += `\n**${link.title}** (${link.type}):\n`;
                  prBody += `- ❌ ${link.url}\n`;
                  prBody += `- ✅ ${link.suggestion} (via ${link.suggestionProvider})\n`;
                });
              }
              
              const unfixedLinks = reportData.brokenLinksData.filter(link => !link.suggestion);
              if (unfixedLinks.length > 0) {
                prBody += `\n\n### Links Quebrados (Não Corrigidos):\n`;
                unfixedLinks.forEach(link => {
                  prBody += `\n**${link.title}** (${link.type}):\n`;
                  prBody += `- ❌ ${link.url}\n`;
                });
              }
            }
            
            prBody += `\n\n**Ação Necessária:**
            Por favor, revise cuidadosamente as alterações antes de fazer o merge.

            *Gerado por GitHub Actions.*
            `;
            
            try {
              const { data: existingPulls } = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                head: `${context.repo.owner}:${headBranchName}`,
                base: baseBranchName,
              });

              if (existingPulls.length > 0) {
                const pull_number = existingPulls[0].number;
                await github.rest.pulls.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number,
                  title: prTitle,
                  body: prBody,
                });
                core.notice(`Pull Request existente #${pull_number} atualizado com sucesso.`);

              } else {
                const { data: newPull } = await github.rest.pulls.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  head: headBranchName,
                  base: baseBranchName,
                  title: prTitle,
                  body: prBody,
                });
                core.notice(`Novo Pull Request #${newPull.number} criado com sucesso.`);
              }
            } catch (error) {
              core.setFailed(`Falha ao criar ou atualizar o Pull Request: ${error.message}`);
            }
