name: AI Link Checker for Maths Website

on:
  schedule:
    - cron: '0 2 * * *' # roda todo dia às 2h UTC
  workflow_dispatch:

jobs:
  check-links:
    runs-on: ubuntu-latest
    timeout-minutes: 120

    steps:
      - name: Checkout site
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT_FOR_ACTIONS || secrets.GITHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Ensure specific packages are installed
        run: npm install axios p-limit @babel/parser @babel/traverse @babel/generator

      - name: Run AI Link Checker
        env:
          GOOGLE_GEMINI_API: ${{ secrets.GOOGLE_GEMINI_API }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          CLAUDE_API: ${{ secrets.CLAUDE_API }}
          DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
          QWEN_API: ${{ secrets.QWEN_API }}
          QWEN_API_2: ${{ secrets.QWEN_API_2 }}
        run: |
          set -eux
          node scripts/check-links.js

      - name: Upload broken links report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: broken-links-report
          path: scripts/broken-links.json
          if-no-files-found: error

      - name: Generate summary for GitHub Actions
        if: always()
        run: |
          set -eux
          if [ -f "scripts/broken-links.json" ]; then
            BROKEN_LINKS_COUNT=$(jq 'length' scripts/broken-links.json 2>/dev/null || echo 'N/A')
            echo "## AI Link Checker Report" >> $GITHUB_STEP_SUMMARY
            echo "- Broken links found: $BROKEN_LINKS_COUNT" >> $GITHUB_STEP_SUMMARY
            if [ "$BROKEN_LINKS_COUNT" != "0" ] && [ "$BROKEN_LINKS_COUNT" != "N/A" ]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### Broken Links (JSON preview)" >> $GITHUB_STEP_SUMMARY
              jq -r '.[] | "- **\(.topic)** / **\(.subtopic)** (\(.type))<br>  🔗 [link](\(.url))<br>  📝 \(.description)"' scripts/broken-links.json >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "## AI Link Checker Report" >> $GITHUB_STEP_SUMMARY
            echo "❌ Could not generate report. Check logs for details." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Commit and push report branch
        if: always()
        run: |
          set -eux
          git config --global user.name 'GitHub Actions Bot'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          BRANCH_NAME="chore/ai-link-checker-report"
          git checkout -B "$BRANCH_NAME"
          git add scripts/broken-links.json || echo "File not modified or does not exist."
          if ! git diff --quiet --cached; then
            git commit -m "chore: AI link checker broken links report [skip ci]"
            git push --force --set-upstream origin "$BRANCH_NAME"
          fi

      - name: Create or Update Pull Request
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT_FOR_ACTIONS || secrets.GITHUB_TOKEN }}
          script: |
            const baseBranchName = 'main';
            const headBranchName = 'chore/ai-link-checker-report';
            const prTitle = 'chore: AI Link Checker Broken Links Report';

            let brokenLinks = [];
            const fs = require('fs');
            try {
              if (fs.existsSync('scripts/broken-links.json')) {
                brokenLinks = JSON.parse(fs.readFileSync('scripts/broken-links.json', 'utf8'));
              }
            } catch (error) {
              console.error("Error reading report file:", error);
            }

            let prBody = `
            ## AI Link Checker Broken Links Report

            **Summary:**
            - Broken links found: ${brokenLinks.length || 'N/A'}
            `;

            if (brokenLinks.length > 0) {
              prBody += `\n\n### Broken Links (JSON format):\n\`\`\`json\n${JSON.stringify(brokenLinks, null, 2)}\n\`\`\`\n`;
            }

            prBody += `\n\n**Action Required:**\nPlease review and update the broken links manually as needed.\n\n*Generated by GitHub Actions.*\n`;

            try {
              const { data: existingPulls } = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                head: `${context.repo.owner}:${headBranchName}`,
                base: baseBranchName
              });

              if (existingPulls.length > 0) {
                const pull_number = existingPulls[0].number;
                await github.rest.pulls.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number,
                  title: prTitle,
                  body: prBody
                });
                core.notice(`Existing Pull Request #${pull_number} updated successfully.`);
              } else {
                const { data: newPull } = await github.rest.pulls.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  head: headBranchName,
                  base: baseBranchName,
                  title: prTitle,
                  body: prBody
                });
                core.notice(`New Pull Request #${newPull.number} created successfully.`);
              }
            } catch (error) {
              core.setFailed(`Failed to create or update Pull Request: ${error.message}`);
            }
