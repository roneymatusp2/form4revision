name: Check and Fix Broken Links

on:
  push:
    branches:
      - main
  schedule:
    - cron: '30 2 * * 0'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-link-fix-branch
  cancel-in-progress: true

jobs:
  check-links:
    name: Check and Fix Broken Links
    runs-on: ubuntu-latest
    timeout-minutes: 120

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT_FOR_ACTIONS || secrets.GITHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          set -eux
          npm ci

      - name: Ensure specific packages are installed
        run: |
          set -eux
          npm install axios p-limit @babel/parser @babel/traverse

      - name: Run link checker script with retries
        id: link-check
        env:
          GOOGLE_GEMINI_API: ${{ secrets.GOOGLE_GEMINI_API }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          CLAUDE_API: ${{ secrets.CLAUDE_API }}
          DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
          QWEN_API: ${{ secrets.QWEN_API }}
          QWEN_API_2: ${{ secrets.QWEN_API_2 }}
        run: |
          set -eux

          function run_with_retry {
            max_attempts=3
            attempt=1

            while [ $attempt -le $max_attempts ]; do
              echo "Attempt $attempt of $max_attempts"

              if node scripts/check-links.js; then # Assumes your script is at scripts/check-links.js
                echo "Script executed successfully!"
                return 0
              else
                echo "Attempt $attempt failed. Exit code: $?"

                if [ $attempt -lt $max_attempts ]; then
                  wait_time=$((60 * attempt))
                  echo "Waiting $wait_time seconds before next attempt..."
                  sleep $wait_time
                fi

                attempt=$((attempt + 1))
              fi
            done

            echo "All attempts failed!"
            return 1
          }

          run_with_retry

      - name: Upload link-check logs (artifacts)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: link-check-logs
          path: |
            scripts/link-check-stats.json
          if-no-files-found: ignore

      - name: Generate summary for GitHub Actions
        if: always()
        run: |
          set -eux
          if [ -f "scripts/link-check-stats.json" ]; then
            BROKEN_LINKS_COUNT=$(jq '.brokenLinkCount' scripts/link-check-stats.json 2>/dev/null || echo 'N/A')
            FIXED_LINKS_COUNT=$(jq '.linksFixedInFile' scripts/link-check-stats.json 2>/dev/null || echo 'N/A')
            TOTAL_LINKS_COUNT=$(jq '.totalLinksChecked' scripts/link-check-stats.json 2>/dev/null || echo 'N/A')

            echo "## Link Checker Report" >> $GITHUB_STEP_SUMMARY
            echo "- Total links checked: $TOTAL_LINKS_COUNT" >> $GITHUB_STEP_SUMMARY
            echo "- Broken links found: $BROKEN_LINKS_COUNT" >> $GITHUB_STEP_SUMMARY
            echo "- Broken links fixed: $FIXED_LINKS_COUNT" >> $GITHUB_STEP_SUMMARY

            if [ "$FIXED_LINKS_COUNT" != "0" ] && [ "$FIXED_LINKS_COUNT" != "N/A" ]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### Fixed Links" >> $GITHUB_STEP_SUMMARY
              jq -r '.brokenLinksDetails[] | select(.suggestedReplacement != null) | "- **" + .title + "**<br>  ❌ " + .originalUrl + "<br>  ✅ " + .suggestedReplacement + " (via " + .suggestionSource + ")"' scripts/link-check-stats.json >> $GITHUB_STEP_SUMMARY
            fi

            UNFIXED_COUNT=$(jq '.brokenLinkCount - .linksFixedInFile' scripts/link-check-stats.json 2>/dev/null || echo 'N/A')
            if [ "$UNFIXED_COUNT" != "0" ] && [ "$UNFIXED_COUNT" != "N/A" ]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### Broken Links (Not Fixed)" >> $GITHUB_STEP_SUMMARY
              jq -r '.brokenLinksDetails[] | select(.suggestedReplacement == null) | "- **" + .title + "**<br>  ❌ " + .originalUrl' scripts/link-check-stats.json >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "## Link Checker Report" >> $GITHUB_STEP_SUMMARY
            echo "❌ Could not generate report. Check logs for details." >> $GITHUB_STEP_SUMMARY
          fi
        id: generate_summary # Added ID for potential future use

      - name: Commit and push changes to dedicated branch
        if: success() && steps.generate_summary.outcome == 'success' # Ensure summary generation didn't fail before commit
        run: |
          set -eux

          git config --global user.name 'GitHub Actions Bot'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

          BRANCH_NAME="chore/auto-link-fixes"
          git checkout -B "$BRANCH_NAME"

          git add src/data/externalResources-new.ts || echo "File not modified or does not exist."
          git add scripts/link-check-stats.json || echo "File not modified or does not exist."

          if ! git diff --quiet --cached; then
            echo "Changes detected. Committing and pushing..."
            git commit -m "fix(links): Auto-fix broken links" \
                       -m "Automated link fixing using pattern matching and multi-provider AI." \
                       -m "[skip ci]"

            git push --force --set-upstream origin "$BRANCH_NAME"
            echo "changes_pushed=true" >> $GITHUB_OUTPUT
          else
            echo "No changes detected for commit."
            echo "changes_pushed=false" >> $GITHUB_OUTPUT
          fi
        id: commit_push

      - name: Create or Update Pull Request
        if: success() && steps.commit_push.outputs.changes_pushed == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT_FOR_ACTIONS || secrets.GITHUB_TOKEN }}
          script: |
            const baseBranchName = 'main';
            const headBranchName = 'chore/auto-link-fixes';
            const prTitle = 'fix(links): Automatic Broken Link Fixes';

            let reportData = {};
            const fs = require('fs');
            try {
              if (fs.existsSync('scripts/link-check-stats.json')) {
                reportData = JSON.parse(fs.readFileSync('scripts/link-check-stats.json', 'utf8'));
              }
            } catch (error) {
              console.error("Error reading report file:", error);
            }

            let prBody = `
            ## Automatic Broken Link Fixes

            This Pull Request was automatically generated by the "Check and Fix Broken Links" workflow.

            **Summary:**
            - Links checked: ${reportData.totalLinksChecked || 'N/A'}
            - Broken links found: ${reportData.brokenLinkCount || 'N/A'}
            - Links fixed: ${reportData.linksFixedInFile || 'N/A'}
            `;

            if (reportData.brokenLinksDetails && reportData.brokenLinksDetails.length > 0) {
              const fixedLinks = reportData.brokenLinksDetails.filter(link => link.suggestedReplacement);
              if (fixedLinks.length > 0) {
                prBody += `\n\n### Fixed Links:\n`;
                fixedLinks.forEach(link => {
                  prBody += `\n**${link.title}** (${link.type || 'N/A'}):\n`; // Added fallback for type
                  prBody += `- ❌ \`${link.originalUrl}\`\n`; // Use backticks for URLs
                  prBody += `- ✅ \`${link.suggestedReplacement}\` (via ${link.suggestionSource})\n`;
                });
              }

              const unfixedLinks = reportData.brokenLinksDetails.filter(link => !link.suggestedReplacement);
              if (unfixedLinks.length > 0) {
                prBody += `\n\n### Broken Links (Not Fixed):\n`;
                unfixedLinks.forEach(link => {
                  prBody += `\n**${link.title}** (${link.type || 'N/A'}):\n`;
                  prBody += `- ❌ \`${link.originalUrl}\`\n`;
                });
              }
            }

            prBody += `\n\n**Action Required:**
            Please carefully review the changes before merging.

            *Generated by GitHub Actions.*
            `;

            try {
              const { data: existingPulls } = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                head: `${context.repo.owner}:${headBranchName}`,
                base: baseBranchName,
              });

              if (existingPulls.length > 0) {
                const pull_number = existingPulls[0].number;
                await github.rest.pulls.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number,
                  title: prTitle,
                  body: prBody,
                });
                core.notice(`Existing Pull Request #${pull_number} updated successfully.`);

              } else {
                const { data: newPull } = await github.rest.pulls.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  head: headBranchName,
                  base: baseBranchName,
                  title: prTitle,
                  body: prBody,
                });
                core.notice(`New Pull Request #${newPull.number} created successfully.`);
              }
            } catch (error) {
              core.setFailed(`Failed to create or update Pull Request: ${error.message}`);
            }
